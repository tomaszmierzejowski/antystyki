version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: antystics-db
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=C"
    ports:
      - "127.0.0.1:5432:5432"  # Only bind to localhost for security
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh:ro  # Auto-init script
      - ./backups:/backups  # Mount backups directory
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - antystics-network
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Unified Application (Backend API + Frontend serving)
  app:
    build:
      context: .
      dockerfile: Dockerfile.production
    image: antystyki/app:latest
    container_name: antystics-app
    restart: always
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-Production}
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};Include Error Detail=false
      - Jwt__Secret=${JWT_SECRET}
      - Jwt__Issuer=${JWT_ISSUER:-Antystics}
      - Jwt__Audience=${JWT_AUDIENCE:-AntysticsUsers}
      - Email__SmtpHost=${SMTP_HOST}
      - Email__SmtpPort=${SMTP_PORT}
      - Email__SmtpUser=${SMTP_USER}
      - Email__SmtpPassword=${SMTP_PASSWORD}
      - Email__FromAddress=${EMAIL_FROM_ADDRESS}
      - Email__FromName=${EMAIL_FROM_NAME:-Antystyki}
      - FrontendUrl=${FRONTEND_URL}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - ASPNETCORE_URLS=http://+:5000
    ports:
      - "127.0.0.1:5000:5000"  # Only bind to localhost, Nginx will proxy
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - app_uploads:/app/wwwroot/uploads
      - ./logs:/app/logs  # Application logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - antystics-network
    # Resource limits (increased for unified container)
    deploy:
      resources:
        limits:
          memory: 1536M
        reservations:
          memory: 768M

volumes:
  postgres_data:
    driver: local
  app_uploads:
    driver: local

networks:
  antystics-network:
    driver: bridge

